image: node:16.13.2-alpine

variables:
  # Docker image tag: master, 3.0, 3.1, â€¦
  DOCKER_NICE_VERSION: 'master'
  NICE_TIMEOUT_SECS: '300'
  CYPRESS_INSTALL_BINARY: "0"

  S3_SECRET_ACCESS_KEY: $S3_SECRET_ACCESS_KEY
  CYPRESS_API_KEY: $CYPRESS_API_KEY
  CYPRESS_PASSWORD: $CYPRESS_PASSWORD
  CYPRESS_USER: $CYPRESS_USER
  CYPRESS_USER_API_KEY_HASH: $CYPRESS_USER_API_KEY_HASH
  CYPRESS_USER_PASSWORD_HASH: $CYPRESS_USER_PASSWORD_HASH

  # Feature flags (https://docs.gitlab.com/runner/configuration/feature-flags.html)

  FF_USE_FASTZIP: 'true'        # Use faster, concurrent zip implementation for cache/artifacts.

  FF_NETWORK_PER_BUILD: 'true'  # Create a virtual network for every build.
                                #
                                # Expected to be enabled and enforced on our own runners in the near
                                # future for security reasons.
                                #
                                # https://docs.gitlab.com/runner/executors/docker.html#create-a-network-for-each-job

stages:
  - chore
  - setup
  - quality
  - build
  - pullrequest
  - release
  - onschedule

.nice-as-service:
  services:
  - name: registry.gitlab.com/toccoag/nice2/postgres:${DOCKER_NICE_VERSION}
    alias: postgres
  - name: registry.gitlab.com/toccoag/nice2/nice:${DOCKER_NICE_VERSION}
    alias: nice

    variables:
      hibernate.main.serverName: postgres
      hibernate.main.user: nice
      hibernate.main.password: nice
      hibernate.main.databaseName: nice
      hibernate.main.sslMode: disable
      nice2.persist.history.persistence.state: DISABLED
      nice2.web.core.neverRequireSecureConnection: 'true'
      s3.main.accessKeyId: DRRLPEOZW3UPR75MDNKJ
      s3.main.bucketName: tocco-ci
      s3.main.endpoint: https://objects.rma.cloudscale.ch
      s3.main.secretAccessKey: ${S3_SECRET_ACCESS_KEY}
      SPRING_PROFILE: test      # Remove when https://toccoag.atlassian.net/browse/TOCDEV-5272 is fixed.
  before_script:
  - apt-get update
  - apt-get install -y wget
  - apt-get install -y postgresql-client
  - apt-get install -y curl

  - yarn nice2:wait-for-readyness

yarn_setup:
  stage: setup
  needs: []
  only:
    - external_pull_requests
    - master
    - schedules
  cache:
    key:
      files:
        - yarn.lock
        - packages/*/*/yarn.lock
    paths:
      - node_modules/
      - packages/*/*/node_modules/
  artifacts:
    paths:
    - node_modules/
    - packages/*/*/node_modules/
    expire_in: 5 days
  script:
    - yarn setup:ci
  interruptible: true

linting:
  stage: quality
  dependencies:
    - yarn_setup
  only:
    - external_pull_requests
    - master
  script:
    - yarn lint

formatting:
  stage: quality
  dependencies:
    - yarn_setup
  only:
    - external_pull_requests
    - master
  script:
    - yarn format:check

test:
  stage: quality
  dependencies:
    - yarn_setup
  only:
    - external_pull_requests
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - coverage/
  script:
    - yarn test --ci
  after_script:
    - yarn codecov
  interruptible: true

storybook:
  stage: quality
  dependencies:
    - yarn_setup
  only:
    - external_pull_requests
    - master
  before_script:
    - apk update && apk add bash && apk add openssh-client && apk add git
  script:
    - BACKEND=https://master.tocco.ch yarn build-storybook
    - scripts/deploy_storybook_gitlab.sh

storybook-link:
  stage: pullrequest
  dependencies: []
  needs:
    - storybook
  cache: {}
  before_script:
    - apk update && apk add bash && apk add curl && apk add jq
  only:
    - external_pull_requests
  script:
    - scripts/storybook_link_gitlab.sh

auto-release:
  stage: release
  dependencies: []
  only:
    variables:
      - $CI_RUN_AUTO_RELEASE == "1"
  before_script:
    - apk update && apk add bash && apk add curl && apk add git && apk add openssh && apk add jq && apk add ncurses
  variables:
    TERM: "xterm-256color"
  script:
    - ./scripts/auto-release.sh

cherrypick:
  stage: release
  dependencies: []
  only:
    - /^nice-releases\/[0-9]+$/
  before_script:
    - apk update && apk add bash && apk add curl && apk add git && apk add openssh && apk add jq && apk add ncurses
  variables:
    TERM: "xterm-256color"
  script:
    - ./scripts/cherrypick.sh

cypress:
  extends:
  - .nice-as-service
  stage: onschedule
  dependencies:
    - yarn_setup
  image: cypress/base:16.14.2
  variables:
    CYPRESS_INSTALL_BINARY: "10.3.1"
    HIBERNATE_MAIN_SERVERNAME: "postgres"
    HIBERNATE_MAIN_DATABASENAME: "nice"
    POSTGRES_USER: "postgres"
    CYPRESS_BASE_URL: "http://nice:8080"
    BACKEND_URL: "http://nice:8080"
  only:
    variables:
      - $CI_RUN_CYPRESS == "1"
  script:
    - npm rebuild cypress
    - yarn db:prepare
    - yarn db:dump
    - yarn widgets:serve &
    - yarn widgets:wait-for-readyness
    - yarn nice2:wait-for-readyness
    - yarn cypress:run
  artifacts:
    paths:
      - cypress/videos
    expire_in: 1 week
    when: always

tagging:
  stage: chore
  only:
    - master
    - /^nice-releases\/[0-9]+$/
  before_script:
    - apk update && apk add bash && apk add curl && apk add git && apk add openssh-client
  script:
    - ./scripts/tagging.sh

sonarqube:
  stage: onschedule
  dependencies:
    - yarn_setup
    - test
  only:
    variables:
      - $CI_RUN_SONARQUBE == "1"
  before_script: # hacky, glibc isn't part of alpine and bundled java fails. we need to tell scanner to use system jre
    - apk --update add openjdk11-jre # add jre
    - yarn sonarqube || echo 'Sonar fail' # run command once so it downloads sonar scanner
    - set -- /root/.sonar/native-sonar-scanner/* && sed -i 's/use_embedded_jre=true/use_embedded_jre=false/g' "$1/bin/sonar-scanner" # tell scanner to use system jre
  script:
    - yarn sonarqube -Dsonar.login=$SONARQUBE_KEY
