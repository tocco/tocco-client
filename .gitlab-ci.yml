image: node:16.13.2-alpine

variables:
  CYPRESS_INSTALL_BINARY: "0"

  # Feature flags (https://docs.gitlab.com/runner/configuration/feature-flags.html)

  FF_USE_FASTZIP: 'true'        # Use faster, concurrent zip implementation for cache/artifacts.

  FF_NETWORK_PER_BUILD: 'true'  # Create a virtual network for every build.
                                #
                                # Expected to be enabled and enforced on our own runners in the near
                                # future for security reasons.
                                #
                                # https://docs.gitlab.com/runner/executors/docker.html#create-a-network-for-each-job

stages:
  - chore
  - setup
  - quality
  - build
  - pullrequest
  - release
  - onschedule

yarn_setup:
  stage: setup
  needs: []
  only:
    - external_pull_requests
    - master
  cache:
    key:
      files:
        - yarn.lock
        - packages/*/*/yarn.lock
    paths:
      - node_modules/
      - packages/*/*/node_modules/
  artifacts:
    paths:
    - node_modules/
    - packages/*/*/node_modules/
    expire_in: 5 days
  script:
    - yarn setup:ci
  interruptible: true

linting:
  stage: quality
  dependencies:
    - yarn_setup
  only:
    - external_pull_requests
    - master
  script:
    - yarn lint

formatting:
  stage: quality
  dependencies:
    - yarn_setup
  only:
    - external_pull_requests
    - master
  script:
    - yarn format:check

test:
  stage: quality
  dependencies:
    - yarn_setup
  only:
    - external_pull_requests
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - coverage/
  script:
    - yarn test --ci
  after_script:
    - yarn codecov
  interruptible: true

storybook:
  stage: quality
  dependencies:
    - yarn_setup
  only:
    - external_pull_requests
    - master
  before_script:
    - apk update && apk add bash && apk add openssh-client && apk add git
  script:
    - BACKEND=https://master.tocco.ch yarn build-storybook
    - scripts/deploy_storybook_gitlab.sh

storybook-link:
  stage: pullrequest
  dependencies: []
  needs:
    - storybook
  cache: {}
  before_script:
    - apk update && apk add bash && apk add curl && apk add jq
  only:
    - external_pull_requests
  script:
    - scripts/storybook_link_gitlab.sh

auto-release:
  stage: release
  dependencies: []
  only:
    variables:
      - $CI_RUN_AUTO_RELEASE == "1"
  before_script:
    - apk update && apk add bash && apk add curl && apk add git && apk add openssh && apk add jq && apk add ncurses
  variables:
    TERM: "xterm-256color"
  script:
    - ./scripts/auto-release.sh

cherrypick:
  stage: release
  dependencies: []
  only:
    - /^nice-releases\/[0-9]+$/
  before_script:
    - apk update && apk add bash && apk add curl && apk add git && apk add openssh && apk add jq && apk add ncurses
  variables:
    TERM: "xterm-256color"
  script:
    - ./scripts/cherrypick.sh

cypress:
  stage: onschedule
  dependencies:
    - yarn_setup
  image: cypress/base:16.14.2
  variables:
    CYPRESS_INSTALL_BINARY: "9.6.0"
  only:
    variables:
      - $CI_RUN_CYPRESS == "1"
  script:
    - npm rebuild cypress
    - yarn cypress:master:run
  artifacts:
    paths:
      - cypress/videos
    expire_in: 1 week
    when: always

tagging:
  stage: chore
  only:
    - master
    - /^nice-releases\/[0-9]+$/
  before_script:
    - apk update && apk add bash && apk add curl && apk add git && apk add openssh-client
  script:
    - ./scripts/tagging.sh

sonarqube:
  stage: onschedule
  dependencies:
    - yarn_setup
    - test
  only:
    variables:
      - $CI_RUN_SONARQUBE == "1"
  before_script: # hacky, glibc isn't part of alpine and bundled java fails. we need to tell scanner to use system jre
    - apk --update add openjdk11-jre # add jre
    - yarn sonarqube || echo 'Sonar fail' # run command once so it downloads sonar scanner
    - set -- /root/.sonar/native-sonar-scanner/* && sed -i 's/use_embedded_jre=true/use_embedded_jre=false/g' "$1/bin/sonar-scanner" # tell scanner to use system jre
  script:
    - yarn sonarqube -Dsonar.login=$SONARQUBE_KEY
